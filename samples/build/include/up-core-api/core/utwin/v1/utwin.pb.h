// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: core/utwin/v1/utwin.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_core_2futwin_2fv1_2futwin_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_core_2futwin_2fv1_2futwin_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "uprotocol_options.pb.h"
#include "ustatus.pb.h"
#include "uri.pb.h"
#include "umessage.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_core_2futwin_2fv1_2futwin_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_core_2futwin_2fv1_2futwin_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_core_2futwin_2fv1_2futwin_2eproto;
namespace uprotocol {
namespace core {
namespace utwin {
namespace v1 {
class GetLastMessagesResponse;
struct GetLastMessagesResponseDefaultTypeInternal;
extern GetLastMessagesResponseDefaultTypeInternal _GetLastMessagesResponse_default_instance_;
class MessageResponse;
struct MessageResponseDefaultTypeInternal;
extern MessageResponseDefaultTypeInternal _MessageResponse_default_instance_;
}  // namespace v1
}  // namespace utwin
}  // namespace core
}  // namespace uprotocol
PROTOBUF_NAMESPACE_OPEN
template<> ::uprotocol::core::utwin::v1::GetLastMessagesResponse* Arena::CreateMaybeMessage<::uprotocol::core::utwin::v1::GetLastMessagesResponse>(Arena*);
template<> ::uprotocol::core::utwin::v1::MessageResponse* Arena::CreateMaybeMessage<::uprotocol::core::utwin::v1::MessageResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace uprotocol {
namespace core {
namespace utwin {
namespace v1 {

// ===================================================================

class MessageResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:uprotocol.core.utwin.v1.MessageResponse) */ {
 public:
  inline MessageResponse() : MessageResponse(nullptr) {}
  ~MessageResponse() override;
  explicit PROTOBUF_CONSTEXPR MessageResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MessageResponse(const MessageResponse& from);
  MessageResponse(MessageResponse&& from) noexcept
    : MessageResponse() {
    *this = ::std::move(from);
  }

  inline MessageResponse& operator=(const MessageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageResponse& operator=(MessageResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MessageResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MessageResponse* internal_default_instance() {
    return reinterpret_cast<const MessageResponse*>(
               &_MessageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MessageResponse& a, MessageResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MessageResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MessageResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MessageResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MessageResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MessageResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MessageResponse& from) {
    MessageResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "uprotocol.core.utwin.v1.MessageResponse";
  }
  protected:
  explicit MessageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTopicFieldNumber = 1,
    kStatusFieldNumber = 2,
    kMessageFieldNumber = 3,
  };
  // .uprotocol.v1.UUri topic = 1;
  bool has_topic() const;
  private:
  bool _internal_has_topic() const;
  public:
  void clear_topic();
  const ::uprotocol::v1::UUri& topic() const;
  PROTOBUF_NODISCARD ::uprotocol::v1::UUri* release_topic();
  ::uprotocol::v1::UUri* mutable_topic();
  void set_allocated_topic(::uprotocol::v1::UUri* topic);
  private:
  const ::uprotocol::v1::UUri& _internal_topic() const;
  ::uprotocol::v1::UUri* _internal_mutable_topic();
  public:
  void unsafe_arena_set_allocated_topic(
      ::uprotocol::v1::UUri* topic);
  ::uprotocol::v1::UUri* unsafe_arena_release_topic();

  // .uprotocol.v1.UStatus status = 2;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::uprotocol::v1::UStatus& status() const;
  PROTOBUF_NODISCARD ::uprotocol::v1::UStatus* release_status();
  ::uprotocol::v1::UStatus* mutable_status();
  void set_allocated_status(::uprotocol::v1::UStatus* status);
  private:
  const ::uprotocol::v1::UStatus& _internal_status() const;
  ::uprotocol::v1::UStatus* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::uprotocol::v1::UStatus* status);
  ::uprotocol::v1::UStatus* unsafe_arena_release_status();

  // .uprotocol.v1.UMessage message = 3;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const ::uprotocol::v1::UMessage& message() const;
  PROTOBUF_NODISCARD ::uprotocol::v1::UMessage* release_message();
  ::uprotocol::v1::UMessage* mutable_message();
  void set_allocated_message(::uprotocol::v1::UMessage* message);
  private:
  const ::uprotocol::v1::UMessage& _internal_message() const;
  ::uprotocol::v1::UMessage* _internal_mutable_message();
  public:
  void unsafe_arena_set_allocated_message(
      ::uprotocol::v1::UMessage* message);
  ::uprotocol::v1::UMessage* unsafe_arena_release_message();

  // @@protoc_insertion_point(class_scope:uprotocol.core.utwin.v1.MessageResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::uprotocol::v1::UUri* topic_;
    ::uprotocol::v1::UStatus* status_;
    ::uprotocol::v1::UMessage* message_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_core_2futwin_2fv1_2futwin_2eproto;
};
// -------------------------------------------------------------------

class GetLastMessagesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:uprotocol.core.utwin.v1.GetLastMessagesResponse) */ {
 public:
  inline GetLastMessagesResponse() : GetLastMessagesResponse(nullptr) {}
  ~GetLastMessagesResponse() override;
  explicit PROTOBUF_CONSTEXPR GetLastMessagesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetLastMessagesResponse(const GetLastMessagesResponse& from);
  GetLastMessagesResponse(GetLastMessagesResponse&& from) noexcept
    : GetLastMessagesResponse() {
    *this = ::std::move(from);
  }

  inline GetLastMessagesResponse& operator=(const GetLastMessagesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLastMessagesResponse& operator=(GetLastMessagesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetLastMessagesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetLastMessagesResponse* internal_default_instance() {
    return reinterpret_cast<const GetLastMessagesResponse*>(
               &_GetLastMessagesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GetLastMessagesResponse& a, GetLastMessagesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLastMessagesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetLastMessagesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetLastMessagesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetLastMessagesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetLastMessagesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetLastMessagesResponse& from) {
    GetLastMessagesResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetLastMessagesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "uprotocol.core.utwin.v1.GetLastMessagesResponse";
  }
  protected:
  explicit GetLastMessagesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponsesFieldNumber = 2,
  };
  // repeated .uprotocol.core.utwin.v1.MessageResponse responses = 2;
  int responses_size() const;
  private:
  int _internal_responses_size() const;
  public:
  void clear_responses();
  ::uprotocol::core::utwin::v1::MessageResponse* mutable_responses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::uprotocol::core::utwin::v1::MessageResponse >*
      mutable_responses();
  private:
  const ::uprotocol::core::utwin::v1::MessageResponse& _internal_responses(int index) const;
  ::uprotocol::core::utwin::v1::MessageResponse* _internal_add_responses();
  public:
  const ::uprotocol::core::utwin::v1::MessageResponse& responses(int index) const;
  ::uprotocol::core::utwin::v1::MessageResponse* add_responses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::uprotocol::core::utwin::v1::MessageResponse >&
      responses() const;

  // @@protoc_insertion_point(class_scope:uprotocol.core.utwin.v1.GetLastMessagesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::uprotocol::core::utwin::v1::MessageResponse > responses_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_core_2futwin_2fv1_2futwin_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MessageResponse

// .uprotocol.v1.UUri topic = 1;
inline bool MessageResponse::_internal_has_topic() const {
  return this != internal_default_instance() && _impl_.topic_ != nullptr;
}
inline bool MessageResponse::has_topic() const {
  return _internal_has_topic();
}
inline const ::uprotocol::v1::UUri& MessageResponse::_internal_topic() const {
  const ::uprotocol::v1::UUri* p = _impl_.topic_;
  return p != nullptr ? *p : reinterpret_cast<const ::uprotocol::v1::UUri&>(
      ::uprotocol::v1::_UUri_default_instance_);
}
inline const ::uprotocol::v1::UUri& MessageResponse::topic() const {
  // @@protoc_insertion_point(field_get:uprotocol.core.utwin.v1.MessageResponse.topic)
  return _internal_topic();
}
inline void MessageResponse::unsafe_arena_set_allocated_topic(
    ::uprotocol::v1::UUri* topic) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.topic_);
  }
  _impl_.topic_ = topic;
  if (topic) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:uprotocol.core.utwin.v1.MessageResponse.topic)
}
inline ::uprotocol::v1::UUri* MessageResponse::release_topic() {
  
  ::uprotocol::v1::UUri* temp = _impl_.topic_;
  _impl_.topic_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::uprotocol::v1::UUri* MessageResponse::unsafe_arena_release_topic() {
  // @@protoc_insertion_point(field_release:uprotocol.core.utwin.v1.MessageResponse.topic)
  
  ::uprotocol::v1::UUri* temp = _impl_.topic_;
  _impl_.topic_ = nullptr;
  return temp;
}
inline ::uprotocol::v1::UUri* MessageResponse::_internal_mutable_topic() {
  
  if (_impl_.topic_ == nullptr) {
    auto* p = CreateMaybeMessage<::uprotocol::v1::UUri>(GetArenaForAllocation());
    _impl_.topic_ = p;
  }
  return _impl_.topic_;
}
inline ::uprotocol::v1::UUri* MessageResponse::mutable_topic() {
  ::uprotocol::v1::UUri* _msg = _internal_mutable_topic();
  // @@protoc_insertion_point(field_mutable:uprotocol.core.utwin.v1.MessageResponse.topic)
  return _msg;
}
inline void MessageResponse::set_allocated_topic(::uprotocol::v1::UUri* topic) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.topic_);
  }
  if (topic) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(topic));
    if (message_arena != submessage_arena) {
      topic = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, topic, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.topic_ = topic;
  // @@protoc_insertion_point(field_set_allocated:uprotocol.core.utwin.v1.MessageResponse.topic)
}

// .uprotocol.v1.UStatus status = 2;
inline bool MessageResponse::_internal_has_status() const {
  return this != internal_default_instance() && _impl_.status_ != nullptr;
}
inline bool MessageResponse::has_status() const {
  return _internal_has_status();
}
inline const ::uprotocol::v1::UStatus& MessageResponse::_internal_status() const {
  const ::uprotocol::v1::UStatus* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::uprotocol::v1::UStatus&>(
      ::uprotocol::v1::_UStatus_default_instance_);
}
inline const ::uprotocol::v1::UStatus& MessageResponse::status() const {
  // @@protoc_insertion_point(field_get:uprotocol.core.utwin.v1.MessageResponse.status)
  return _internal_status();
}
inline void MessageResponse::unsafe_arena_set_allocated_status(
    ::uprotocol::v1::UStatus* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:uprotocol.core.utwin.v1.MessageResponse.status)
}
inline ::uprotocol::v1::UStatus* MessageResponse::release_status() {
  
  ::uprotocol::v1::UStatus* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::uprotocol::v1::UStatus* MessageResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:uprotocol.core.utwin.v1.MessageResponse.status)
  
  ::uprotocol::v1::UStatus* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::uprotocol::v1::UStatus* MessageResponse::_internal_mutable_status() {
  
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::uprotocol::v1::UStatus>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::uprotocol::v1::UStatus* MessageResponse::mutable_status() {
  ::uprotocol::v1::UStatus* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:uprotocol.core.utwin.v1.MessageResponse.status)
  return _msg;
}
inline void MessageResponse::set_allocated_status(::uprotocol::v1::UStatus* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:uprotocol.core.utwin.v1.MessageResponse.status)
}

// .uprotocol.v1.UMessage message = 3;
inline bool MessageResponse::_internal_has_message() const {
  return this != internal_default_instance() && _impl_.message_ != nullptr;
}
inline bool MessageResponse::has_message() const {
  return _internal_has_message();
}
inline const ::uprotocol::v1::UMessage& MessageResponse::_internal_message() const {
  const ::uprotocol::v1::UMessage* p = _impl_.message_;
  return p != nullptr ? *p : reinterpret_cast<const ::uprotocol::v1::UMessage&>(
      ::uprotocol::v1::_UMessage_default_instance_);
}
inline const ::uprotocol::v1::UMessage& MessageResponse::message() const {
  // @@protoc_insertion_point(field_get:uprotocol.core.utwin.v1.MessageResponse.message)
  return _internal_message();
}
inline void MessageResponse::unsafe_arena_set_allocated_message(
    ::uprotocol::v1::UMessage* message) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.message_);
  }
  _impl_.message_ = message;
  if (message) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:uprotocol.core.utwin.v1.MessageResponse.message)
}
inline ::uprotocol::v1::UMessage* MessageResponse::release_message() {
  
  ::uprotocol::v1::UMessage* temp = _impl_.message_;
  _impl_.message_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::uprotocol::v1::UMessage* MessageResponse::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_release:uprotocol.core.utwin.v1.MessageResponse.message)
  
  ::uprotocol::v1::UMessage* temp = _impl_.message_;
  _impl_.message_ = nullptr;
  return temp;
}
inline ::uprotocol::v1::UMessage* MessageResponse::_internal_mutable_message() {
  
  if (_impl_.message_ == nullptr) {
    auto* p = CreateMaybeMessage<::uprotocol::v1::UMessage>(GetArenaForAllocation());
    _impl_.message_ = p;
  }
  return _impl_.message_;
}
inline ::uprotocol::v1::UMessage* MessageResponse::mutable_message() {
  ::uprotocol::v1::UMessage* _msg = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:uprotocol.core.utwin.v1.MessageResponse.message)
  return _msg;
}
inline void MessageResponse::set_allocated_message(::uprotocol::v1::UMessage* message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.message_);
  }
  if (message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(message));
    if (message_arena != submessage_arena) {
      message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.message_ = message;
  // @@protoc_insertion_point(field_set_allocated:uprotocol.core.utwin.v1.MessageResponse.message)
}

// -------------------------------------------------------------------

// GetLastMessagesResponse

// repeated .uprotocol.core.utwin.v1.MessageResponse responses = 2;
inline int GetLastMessagesResponse::_internal_responses_size() const {
  return _impl_.responses_.size();
}
inline int GetLastMessagesResponse::responses_size() const {
  return _internal_responses_size();
}
inline void GetLastMessagesResponse::clear_responses() {
  _impl_.responses_.Clear();
}
inline ::uprotocol::core::utwin::v1::MessageResponse* GetLastMessagesResponse::mutable_responses(int index) {
  // @@protoc_insertion_point(field_mutable:uprotocol.core.utwin.v1.GetLastMessagesResponse.responses)
  return _impl_.responses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::uprotocol::core::utwin::v1::MessageResponse >*
GetLastMessagesResponse::mutable_responses() {
  // @@protoc_insertion_point(field_mutable_list:uprotocol.core.utwin.v1.GetLastMessagesResponse.responses)
  return &_impl_.responses_;
}
inline const ::uprotocol::core::utwin::v1::MessageResponse& GetLastMessagesResponse::_internal_responses(int index) const {
  return _impl_.responses_.Get(index);
}
inline const ::uprotocol::core::utwin::v1::MessageResponse& GetLastMessagesResponse::responses(int index) const {
  // @@protoc_insertion_point(field_get:uprotocol.core.utwin.v1.GetLastMessagesResponse.responses)
  return _internal_responses(index);
}
inline ::uprotocol::core::utwin::v1::MessageResponse* GetLastMessagesResponse::_internal_add_responses() {
  return _impl_.responses_.Add();
}
inline ::uprotocol::core::utwin::v1::MessageResponse* GetLastMessagesResponse::add_responses() {
  ::uprotocol::core::utwin::v1::MessageResponse* _add = _internal_add_responses();
  // @@protoc_insertion_point(field_add:uprotocol.core.utwin.v1.GetLastMessagesResponse.responses)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::uprotocol::core::utwin::v1::MessageResponse >&
GetLastMessagesResponse::responses() const {
  // @@protoc_insertion_point(field_list:uprotocol.core.utwin.v1.GetLastMessagesResponse.responses)
  return _impl_.responses_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace utwin
}  // namespace core
}  // namespace uprotocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_core_2futwin_2fv1_2futwin_2eproto
